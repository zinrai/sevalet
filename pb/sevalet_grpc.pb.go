// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sevalet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CommandExecutor_Execute_FullMethodName = "/sevalet.CommandExecutor/Execute"
)

// CommandExecutorClient is the client API for CommandExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandExecutorClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type commandExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandExecutorClient(cc grpc.ClientConnInterface) CommandExecutorClient {
	return &commandExecutorClient{cc}
}

func (c *commandExecutorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, CommandExecutor_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandExecutorServer is the server API for CommandExecutor service.
// All implementations must embed UnimplementedCommandExecutorServer
// for forward compatibility
type CommandExecutorServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedCommandExecutorServer()
}

// UnimplementedCommandExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedCommandExecutorServer struct {
}

func (UnimplementedCommandExecutorServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCommandExecutorServer) mustEmbedUnimplementedCommandExecutorServer() {}

// UnsafeCommandExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandExecutorServer will
// result in compilation errors.
type UnsafeCommandExecutorServer interface {
	mustEmbedUnimplementedCommandExecutorServer()
}

func RegisterCommandExecutorServer(s grpc.ServiceRegistrar, srv CommandExecutorServer) {
	s.RegisterService(&CommandExecutor_ServiceDesc, srv)
}

func _CommandExecutor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandExecutor_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandExecutorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandExecutor_ServiceDesc is the grpc.ServiceDesc for CommandExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sevalet.CommandExecutor",
	HandlerType: (*CommandExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _CommandExecutor_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sevalet.proto",
}
